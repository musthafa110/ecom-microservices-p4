pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        PRODUCT_IMAGE = 'musthafa110/product-service'
        ORDER_IMAGE = 'musthafa110/order-service'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        NAMESPACE = 'default'
        MONITORING_NAMESPACE = 'monitoring'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git branch: 'main', url: 'https://github.com/musthafa110/ecom-microservices-p4.git'
            }
        }

        stage('Build & Push Docker Images (Blue & Green)') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"

                        def variants = ['blue', 'green']
                        for (v in variants) {
                            docker.build("${PRODUCT_IMAGE}:${v}", "./product-service")
                            docker.build("${ORDER_IMAGE}:${v}", "./order-service")
                            docker.image("${PRODUCT_IMAGE}:${v}").push()
                            docker.image("${ORDER_IMAGE}:${v}").push()
                        }

                        sh "docker logout"
                    }
                }
            }
        }

        stage('Install Monitoring Stack') {
            steps {
                sh """
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                    helm repo update
                    helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \\
                        --namespace ${MONITORING_NAMESPACE} --create-namespace --wait
                """
            }
        }

        stage('Deploy Green Services to Kubernetes') {
            steps {
                sh """
                    kubectl apply -f k8s/product/deployment-green.yaml -n ${NAMESPACE} --record
                    kubectl apply -f k8s/order/deployment-green.yaml -n ${NAMESPACE} --record
                    kubectl apply -f k8s/product/service.yaml -n ${NAMESPACE}
                    kubectl apply -f k8s/order/service.yaml -n ${NAMESPACE}
                    kubectl apply -f k8s/ingress.yaml -n ${NAMESPACE}
                    kubectl apply -f k8s/hpa.yaml -n ${NAMESPACE}
                    kubectl apply -f k8s/product/service-monitor.yaml -n ${MONITORING_NAMESPACE}
                    kubectl apply -f k8s/order/service-monitor.yaml -n ${MONITORING_NAMESPACE}
                """
            }
        }

        stage('Verify Deployments') {
            steps {
                sh """
                    kubectl get pods -n ${NAMESPACE}
                    kubectl get svc -n ${NAMESPACE}
                    kubectl get deployments -n ${NAMESPACE}
                """
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully. Green version is active."
        }
        failure {
            echo "Deployment failed."
        }
    }
}
