pipeline {
    agent any

    environment {
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        DOCKER_IMAGE_PRODUCT = "musthafa110/product-service"
        DOCKER_IMAGE_ORDER = "musthafa110/order-service"
        K8S_NAMESPACE = "ecommerce"
        MONITORING_NAMESPACE = "monitoring"
    }

    stages {
        stage('Build Docker Images') {
            steps {
                dir('product-service') {
                    sh 'docker build -t $DOCKER_IMAGE_PRODUCT .'
                }
                dir('order-service') {
                    sh 'docker build -t $DOCKER_IMAGE_ORDER .'
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $DOCKER_IMAGE_PRODUCT
                        docker push $DOCKER_IMAGE_ORDER
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    kubectl create namespace $K8S_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
                    kubectl apply -f k8s/product-deployment.yaml -n $K8S_NAMESPACE
                    kubectl apply -f k8s/order-deployment.yaml -n $K8S_NAMESPACE
                    kubectl apply -f k8s/hpa.yaml -n $K8S_NAMESPACE
                    kubectl apply -f k8s/ingress.yaml -n $K8S_NAMESPACE
                '''
            }
        }

        stage('Install Monitoring Tools') {
            steps {
                sh '''
                    helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                    helm repo update
                    helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \
                        --namespace $MONITORING_NAMESPACE --create-namespace --wait
                '''
            }
        }

        stage('Apply Monitoring Config') {
            steps {
                sh '''
                    kubectl apply -f k8s/service-monitors/product-service-monitor.yaml -n $MONITORING_NAMESPACE
                    kubectl apply -f k8s/service-monitors/order-service-monitor.yaml -n $MONITORING_NAMESPACE
                '''
            }
        }

        stage('Verify Deployments & Services') {
            steps {
                sh '''
                    kubectl get all -n $K8S_NAMESPACE
                    kubectl get all -n $MONITORING_NAMESPACE
                '''
            }
        }
    }

    post {
        always {
            echo 'Cleaning up any background processes...'
            sh 'pkill -f kubectl port-forward || true'
        }
        failure {
            echo 'Pipeline failed. Check cluster status and permissions.'
        }
    }
}
