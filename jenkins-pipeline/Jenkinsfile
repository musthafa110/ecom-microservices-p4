pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-creds'
        PRODUCT_IMAGE = 'musthafa110/product-service'
        ORDER_IMAGE = 'musthafa110/order-service'
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
        NAMESPACE = 'default'
        MONITORING_NAMESPACE = 'monitoring'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git branch: 'main', url: 'https://github.com/musthafa110/ecom-microservices-p4.git'
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.build("${PRODUCT_IMAGE}:latest", './product-service')
                    docker.build("${ORDER_IMAGE}:latest", './order-service')
                }
            }
        }

       stage('Login & Push Docker Images') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                
                retry(3) {
                    docker.image("${PRODUCT_IMAGE}:latest").push()
                }
                
                retry(3) {
                    docker.image("${ORDER_IMAGE}:latest").push()
                }
                
                sh "docker logout"
            }
        }
    }
}


        stage('Install Monitoring Stack') {
            steps {
                script {
                    sh """
                        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                        helm repo update
                        helm upgrade --install prometheus prometheus-community/kube-prometheus-stack \\
                            --namespace ${MONITORING_NAMESPACE} --create-namespace --wait
                    """
                }
            }
        }

        stage('Deploy Services to Kubernetes') {
            steps {
                script {
                    sh """
                        kubectl apply -f k8s/product-deployment.yaml -n ${NAMESPACE} --record
                        kubectl apply -f k8s/order-deployment.yaml -n ${NAMESPACE} --record
                        kubectl apply -f k8s/ingress.yaml -n ${NAMESPACE}
                        kubectl apply -f k8s/hpa.yaml -n ${NAMESPACE}
                        kubectl apply -f k8s/service-monitors/ -n ${MONITORING_NAMESPACE}
                    """
                }
            }
        }

        stage('Verify Deployments & Services') {
            steps {
                script {
                    sh """
                        echo "App Pods in '${NAMESPACE}':"
                        kubectl get pods -n ${NAMESPACE}

                        echo "Monitoring Pods in '${MONITORING_NAMESPACE}':"
                        kubectl get pods -n ${MONITORING_NAMESPACE}

                        echo "Monitoring Services:"
                        kubectl get svc -n ${MONITORING_NAMESPACE}
                    """
                }
            }
        }

        stage('Expose Monitoring Dashboards (Local Only)') {
            when {
                expression { return false } // Change to true for local dev
            }
            steps {
                script {
                    sh """
                        nohup kubectl port-forward svc/kube-prometheus-stack-grafana 3000:80 -n ${MONITORING_NAMESPACE} > grafana.log 2>&1 &
                        nohup kubectl port-forward svc/kube-prometheus-stack-prometheus 9090:9090 -n ${MONITORING_NAMESPACE} > prometheus.log 2>&1 &
                    """
                }
            }
        }
    }

    post {
        success {
            echo "Deployment completed successfully."
            echo "Grafana: http://localhost:3000"
            echo "Prometheus: http://localhost:9090"
        }
        failure {
            echo "Pipeline failed. Check logs, Helm output, and Kubernetes resources."
        }
        always {
            echo "Cleaning up..."
            sh "pkill -f 'kubectl port-forward' || true"
        }
    }
}
